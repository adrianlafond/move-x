{"version":3,"sources":["context/index.ts","views/Timer/Timer.tsx","views/Favicon/index.tsx","views/Timer/index.ts","views/Settings/index.ts","views/Settings/Settings.tsx","views/MoveAlarm/index.tsx","containers/Root/Root.tsx","containers/Root/index.ts","serviceWorker.ts","index.tsx"],"names":["timer","createContext","minutes","seconds","running","resetTimer","toggleRunning","viewSettings","settings","updateDefaults","exitSettings","formatNumber","value","str","concat","length","activeIcon","interval","Timer","_useContext","useContext","react_default","a","createElement","className","formatTime","onClick","Settings","type","onChange","event","target","id","min","max","step","ICON_MOVE_1","ICON_MOVE_2","setIcon","icon","forEach","size","url","window","PUBLIC_URL","el","document","head","querySelector","setAttribute","getIcon","Favicon","props","clearInterval","fire","setInterval","fireNotification","alarmAcknowledged","Notification","onclose","fireAlert","alert","View","MoveAlarm","permission","requestPermission","then","Root","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","requestAnimationFrame","alarmValue","arguments","undefined","setState","time","objectSpread","state","defaults","alarm","_this$state","newTime","requestNotificationsPermission","_this$state$time","localStorage","setItem","JSON","stringify","view","SETTINGS","TIMER","storedDefaults","getItem","parse","_this$state2","views_Favicon","views_MoveAlarm","renderSettings","renderTimer","_this$state3","context","Provider","views_Timer","views_Settings","React","Component","Boolean","location","hostname","match","ReactDOM","render","containers_Root","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.759fc774.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const timer = createContext({\n  minutes: 20,\n  seconds: 0,\n  running: false,\n  resetTimer: () => { },\n  toggleRunning: () => { },\n  viewSettings: () => { },\n});\n\nexport const settings = createContext({\n  minutes: 20,\n  seconds: 0,\n  updateDefaults: (minutes: number, seconds: number) => {},\n  exitSettings: () => { },\n});\n","import React, { useContext } from 'react';\nimport { timer } from '../../context';\nimport './Timer.css';\n\nfunction formatNumber(value: number): string {\n  let str = `${value}`;\n  while (str.length < 2) {\n    str = '0' + str;\n  }\n  return str;\n}\n\nfunction formatTime(minutes: number, seconds: number): string {\n  return `${formatNumber(minutes)}:${formatNumber(seconds)}`;\n}\n\nconst Timer: React.FC = () => {\n  const { minutes, seconds, running, resetTimer, toggleRunning, viewSettings } = useContext(timer);\n  return (\n    <div className='move-timer'>\n      <p>{formatTime(minutes, seconds)}</p>\n      <button onClick={resetTimer}>RESET</button>\n      <button onClick={toggleRunning}>{running ? 'PAUSE' : 'PLAY'}</button>\n      <button onClick={viewSettings}>SETTINGS</button>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from 'react';\n\n/**\n * Icons: https://icons8.com/icons/small\n */\n\nconst ICON_STATIC = 'icons8-waiting-room-';\nconst ICON_MOVE_1 = 'icons8-walking-';\nconst ICON_MOVE_2 = 'icons8-exercise-';\n\nlet activeIcon: string;\nlet interval: number;\n\ninterface FaviconProps {\n  fire?: boolean;\n};\n\nfunction getIcon(size: number): HTMLLinkElement {\n  let el: HTMLLinkElement | null = document.head.querySelector(`link[sizes=\"${size}x${size}\"]`);\n  if (!el) {\n    el = document.createElement('link');\n    el.setAttribute('rel', 'shortcut icon');\n    el.setAttribute('sizes', `${size}x${size}`);\n  }\n  return el;\n}\n\nfunction setIcon(icon: string) {\n  [16, 32].forEach(size => {\n    const url = `${(window as any).PUBLIC_URL}/${icon}${size}.png`;\n    getIcon(size).setAttribute('href', url);\n  });\n  activeIcon = icon;\n}\n\nfunction animateIcon() {\n  interval = window.setInterval(() => {\n    setIcon(activeIcon === ICON_MOVE_1 ? ICON_MOVE_2 : ICON_MOVE_1);\n  }, 500);\n}\n\nconst Favicon: React.FC<FaviconProps> = props => {\n  window.clearInterval(interval);\n  if (props.fire) {\n    animateIcon();\n  } else {\n    setIcon(ICON_STATIC);\n  }\n  return null;\n}\n\nexport default Favicon;\n","import Timer from './Timer';\nexport default Timer;\n","import Settings from './Settings';\nexport default Settings;\n","import React, { useContext } from 'react';\nimport { settings } from '../../context';\nimport './Settings.css';\n\nconst Settings: React.FC = () => {\n  const { minutes, seconds, updateDefaults, exitSettings } = useContext(settings);\n  const onMinutesChange = (event: { target: HTMLInputElement }) => {\n    updateDefaults(+event.target.value, seconds);\n  };\n  const onSecondsChange = (event: { target: HTMLInputElement }) => {\n    updateDefaults(minutes, +event.target.value);\n  }\n  return (\n    <div className='move-settings'>\n      <h2 className='move-settings__title'>Settings</h2>\n      <input\n        type=\"number\"\n        onChange={onMinutesChange}\n        id=\"input-defaults-minutes\"\n        min=\"0\"\n        max=\"480\"\n        step=\"1\"\n        value={minutes}\n      />\n      <input\n        type=\"number\"\n        onChange={onSecondsChange}\n        id=\"input-defaults-seconds\"\n        min=\"0\"\n        max=\"59\"\n        step=\"1\"\n        value={seconds}\n      />\n      <button onClick={exitSettings}>EXIT</button>\n      <p>Move! relies on notifications. If you're anything like me, you have probably disabled all notifications in your web browser. To re-enable them, at least for this app:</p>\n      <ul>\n        <li>Dig into your web browser preferences: most web browsers allow you to enable notifications for specific domains while keeping them disabled for all others.</li>\n        <li>Open your system or operating system preferences: you may have disabled all notifications entirely for your web browser.</li>\n        <li>Your computer may be in \"do not disturb\" mode (yes, even your desktop computer).</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\n\ntype alarmAcknowledgedType = () => void;\n\ninterface MoveAlarmProps {\n  fire?: boolean;\n  alarmAcknowledged: alarmAcknowledgedType;\n};\n\nfunction fireNotification(alarmAcknowledged: alarmAcknowledgedType) {\n  const notification = new Notification('MOVE!');\n  notification.onclose = alarmAcknowledged;\n}\n\nfunction fireAlert(alarmAcknowledged: alarmAcknowledgedType) {\n  window.alert('MOVE!');\n  alarmAcknowledged();\n}\n\nfunction fireAlarm(alarmAcknowledged: alarmAcknowledgedType) {\n  if ('Notification' in window) {\n    if (Notification.permission === 'granted') {\n      fireNotification(alarmAcknowledged);\n    } else if (Notification.permission === 'default') {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          fireNotification(alarmAcknowledged);\n        } else {\n          fireAlert(alarmAcknowledged);\n        }\n      });\n    } else {\n      fireAlert(alarmAcknowledged);\n    }\n  } else {\n    fireAlert(alarmAcknowledged);\n  }\n}\n\nconst MoveAlarm: React.FC<MoveAlarmProps> = (props: MoveAlarmProps) => {\n  if (props.fire) {\n    fireAlarm(props.alarmAcknowledged);\n  }\n  return null;\n}\n\nexport default MoveAlarm;\n","import React from 'react';\nimport { timer as timerContext, settings as settingsContext } from '../../context';\nimport Timer from '../../views/Timer';\nimport Settings from '../../views/Settings';\nimport Favicon from '../../views/Favicon';\nimport MoveAlarm from '../../views/MoveAlarm';\nimport './Root.css';\n\ninterface Time {\n  minutes: number;\n  seconds: number;\n}\n\nenum View {\n  SETTINGS = 'SETTINGS',\n  TIMER = 'TIMER',\n};\n\ninterface ModelProps {}\n\ninterface ModelState {\n  defaults: Time;\n  time: Time;\n  alarm: boolean;\n  running: boolean;\n  view: View;\n}\n\nclass Root extends React.Component<ModelProps, ModelState> {\n  interval = 0;\n\n  constructor(props: object) {\n    super(props);\n    const storedDefaults = window.localStorage.getItem('defaults');\n    const defaults = storedDefaults ? JSON.parse(storedDefaults) : {\n      minutes: 20,\n      seconds: 0,\n    };\n    this.state = {\n      defaults,\n      time: defaults,\n      alarm: false,\n      running: false,\n      view: View.TIMER,\n    }\n  }\n\n  render() {\n    const { view, alarm } = this.state;\n    return (\n      <div className=\"move-root\">\n        <Favicon fire={alarm} />\n        <MoveAlarm fire={alarm} alarmAcknowledged={this.alarmAcknowledged} />\n        {view === View.SETTINGS ?\n          this.renderSettings() :\n          this.renderTimer()\n        }\n      </div>\n    );\n  }\n\n  renderTimer() {\n    const { time, running } = this.state;\n    const context = {\n      running,\n      minutes: time.minutes,\n      seconds: time.seconds,\n      resetTimer: this.resetTimer,\n      toggleRunning: this.toggleRunning,\n      viewSettings: this.viewSettings,\n    };\n    return (\n      <timerContext.Provider value={context}>\n        <Timer />\n      </timerContext.Provider>\n    );\n  }\n\n  renderSettings() {\n    const { defaults } = this.state;\n    const context = {\n      minutes: defaults.minutes,\n      seconds: defaults.seconds,\n      updateDefaults: this.updateDefaults,\n      exitSettings: this.exitSettings,\n    };\n    return (\n      <settingsContext.Provider value={context}>\n        <Settings />\n      </settingsContext.Provider>\n    );\n  }\n\n  alarmAcknowledged = () => {\n    window.requestAnimationFrame(() => {\n      this.resetTimer();\n    });\n  }\n\n  resetTimer = (alarm = false) => {\n    const alarmValue = alarm === true;\n    this.setState({ time: { ...this.state.defaults }, alarm: alarmValue });\n  }\n\n  toggleRunning = () => {\n    const { defaults, time, running } = this.state;\n    const { minutes, seconds } = time;\n    const newTime = !running && minutes === 0 && seconds === 0 ?\n      { ...defaults } : time;\n    this.setState({ running: !running, time: newTime }, () => {\n      if (this.state.running) {\n        this.requestNotificationsPermission();\n        this.interval = window.setInterval(() => {\n          const { minutes, seconds} = this.state.time;\n          const time = { minutes, seconds };\n          time.seconds = time.seconds === 0 ? 59 : time.seconds - 1;\n          time.minutes = time.seconds === 59 ? time.minutes - 1 : time.minutes;\n          const running = time.minutes !== 0 || time.seconds !== 0;\n          this.setState({ time, running }, () => {\n            if (!running) {\n              window.clearInterval(this.interval);\n              this.setState({ alarm: true });\n            }\n          });\n        }, 1000);\n      } else {\n        window.clearInterval(this.interval);\n      }\n    });\n  }\n\n  requestNotificationsPermission() {\n    if ('Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }\n\n  updateDefaults = (minutes: number, seconds: number) => {\n    const defaults = { minutes, seconds };\n    this.setState({ defaults }, () => {\n      window.localStorage.setItem('defaults', JSON.stringify(defaults));\n    });\n    if (!this.state.running) {\n      this.setState({ time: defaults });\n    }\n  }\n\n  viewSettings = () => {\n    this.setState({ view: View.SETTINGS });\n  }\n\n  exitSettings = () => {\n    this.setState({ view: View.TIMER });\n  }\n}\n\nexport default Root;\n","import Root from './Root';\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './containers/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}